<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自建 scoop repo 的一些问题</title>
    <link href="/2023/04/27/%E8%87%AA%E5%BB%BA-scoop-repo-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <url>/2023/04/27/%E8%87%AA%E5%BB%BA-scoop-repo-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>自建 scoop repo 的话直接从<br><a href="https://github.com/ScoopInstaller/BucketTemplate">Template Bucket for Scoop Installer</a><br>生成就好。</p><p>然后需要在仓库中把 Github Action<br>的权限打开：<code>Settings &gt; Actions &gt; General &gt; Workflow permissions</code>，否则 ci<br>会出错。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MSVC 与 C++ 20 模块初探</title>
    <link href="/2023/01/16/MSVC-%E4%B8%8E-C-20-%E6%A8%A1%E5%9D%97%E5%88%9D%E6%8E%A2/"/>
    <url>/2023/01/16/MSVC-%E4%B8%8E-C-20-%E6%A8%A1%E5%9D%97%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="问题的起源"><a href="#问题的起源" class="headerlink" title="问题的起源"></a>问题的起源</h1><p>今天刚好看到 C++ 20 的新特性，想起来正好把模块学一学。</p><div class="note note-info">            <p>以下代码均采用 MSBuild 进行构建，而非 CMake</p>          </div><p>于是首先把 <code>#include</code> 改为 <code>import</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">import</span> &lt;iostream&gt;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World!\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后果然报错了：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">找不到“<span class="hljs-name">C</span>:\Program Files\Microsoft Visual Studio\<span class="hljs-number">2022</span>\Community\VC\Tools\MSVC\<span class="hljs-number">14.34</span><span class="hljs-number">.31933</span>\include\iostream”的标头单位<br></code></pre></td></tr></table></figure><p>虽说现在模块确实都没实现完整，但是这么简单的例子都能报错实在是有点离谱了（x，应该是哪里没有弄对。然后 Google 以一大圈终于在 <a href="https://learn.microsoft.com/en-us/cpp/build/walkthrough-header-units?view=msvc-170">walkthrough-header-units</a> 找到答案了。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p>首先检查使用时 C++20 或之后的语言标准。<br>在 <code>项目 &gt; 属性 &gt; C/C++ &gt; 语言</code> 里面设置。启用标准库模块的配置也在这里。</p></li><li><p>扫描源以查找模块依赖关系<br>将 <code>项目 &gt; 属性 &gt; C/C++ &gt; 语言 &gt; 扫描源以查找模块依赖关系</code> 设置为是。</p></li></ol><p>重新编译，发现已经可以编译成功了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="header-unit"><a href="#header-unit" class="headerlink" title="header unit"></a>header unit</h2><p>header unit 就是头文件的二进制表示，使用 <code>.ifc</code> 后缀。看来 <code>import &lt;iostream&gt;</code> 这样的语法找的是 header unit，而以 <code>.cpp</code> 为后缀的文件又不会自动查找依赖关系，所以找不到了（</p><p>而根据上面的文档，模块接口文件（以 <code>.ixx</code> 为后缀的文件）会自动查找，所以如果定义了一个模块，然后在 cpp 文件中导入模块，就可以使用了（，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// HelloWorld.ixx</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">module</span> HelloWorld;<br><br><span class="hljs-keyword">import</span> &lt;iostream&gt;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// ConsoleApplication.cpp</span><br><span class="hljs-keyword">import</span> HelloWorld;<br><span class="hljs-keyword">import</span> &lt;iostream&gt;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World!\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码可以成功编译。</p><h2 id="global-module"><a href="#global-module" class="headerlink" title="global module"></a>global module</h2><blockquote><p>我们希望 <code>#include &lt;iostream&gt;</code> 里面的东西的 linkage&#x2F;name mangling 都是和非 module 部分一样的, 千万不能经过 module 的特殊处理.</p><p>所以我们搞出了个 global module fragment 的语法. 用 module; 代表 global module. 这样到 module A; 之前的东西就和以前一样了, 非常好用.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">module</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">module</span> A;<br></code></pre></td></tr></table></figure><h2 id="import-和-include-有什么区别呢？"><a href="#import-和-include-有什么区别呢？" class="headerlink" title="import 和 #include 有什么区别呢？"></a><code>import</code> 和 <code>#include</code> 有什么区别呢？</h2><ul><li><code>import</code> 的实体不会隐式 export</li><li>在编译单元中定义的宏不会影响到头文件（比如在头文件中包含配置，这是需要使用 global module）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Cpp</tag>
      
      <tag>MSVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++&#39;s most vexing parse</title>
    <link href="/2023/01/01/Cpp-most-vexing-parse/"/>
    <url>/2023/01/01/Cpp-most-vexing-parse/</url>
    
    <content type="html"><![CDATA[<h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><p>由 <em>Scott Meyers</em> 再 <code>Effective STL</code> 中提出，含义是针对二义性的 C++ 语句，只要它有可能被解释成函数声明，编译器就肯定将其解释为函数声明。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">std::thread <span class="hljs-title">thread</span><span class="hljs-params">(Task())</span></span>; <span class="hljs-comment">// 这里是函数声明，表明一个名为 thread 的函数，返回一个 std::thread 对象，接受一个无参并返回 Task 对象的函数指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p>要修改的话，可以使用列表初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::thread thread &#123; <span class="hljs-built_in">Task</span>() &#125;<br></code></pre></td></tr></table></figure><p>或者添加多余的括号</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::thread <span class="hljs-title">thread</span><span class="hljs-params">((Task()))</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Helix Editor</title>
    <link href="/2022/10/20/Helix-Editor/"/>
    <url>/2022/10/20/Helix-Editor/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p><a href="https://www.zhihu.com/question/462847687/answer/2324540123">如何评价文本编辑器Helix Editor?</a></p></blockquote><a class="btn" href="https://helix-editor.com/"  target="_blank">官网地址</a><a class="btn" href="https://docs.helix-editor.com/"  target="_blank">文档地址</a><h2 id="主题列表"><a href="#主题列表" class="headerlink" title="主题列表"></a>主题列表</h2><p>位于 <a class="btn" href="https://github.com/helix-editor/helix/tree/master/runtime/themes"  target="_blank">runtime/themes</a> 中</p><p>也可以使用<code>:theme</code>指令然后用 <code>Tab</code>切换</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Omnisharp"><a href="#Omnisharp" class="headerlink" title="Omnisharp"></a>Omnisharp</h3><p>Omnisharp提供的二进制文件有两个：<code>omnisharp-win-x64.zip</code>以及<code>omnisharp-win-x64-net6.0.zip</code></p><p>第一个在本机环境中没法使用，可以在日志里面看到 LSP 启动了，但就是不返回数据，包括但不限于：找不到标准库、不认识 C#10 的新 feature，只有高亮，补全什么的全都没有，迷惑。</p><p>本机环境：</p><ul><li>dotnet 版本为 6.0.402，</li><li>omnisharp的版本为<code>omnisharp-win-x64.zip</code>，</li><li>dotnet 和 omnisharp 均在 PATH 中，</li></ul><p>换为<code>omnisharp-win-x64-net6.0.zip</code>后，能正常补全了。但是还是</p><ul><li>如果 LSP 还没有初始化好就输入的话（大概，极大可能 diagnose 会出问题，会出现对不上号的诊断信息，保存刷新也没用</li><li>跳转还是没法用，看了一下 LSP 返回的是 UNC 路径(file 协议)，helix-editor 不能跳转，但是 vscode 里面就是正常的。（虽然 C# 跳过去也就一个接口，实现都没有，没啥用<br>然后如果鼠标碰到返回的UNC路径的话还可能把 Windows Terminal 干到无响应（这是什么原理<ul><li>相关 Github Issue：<a href="https://github.com/helix-editor/helix/issues/2430">#2430</a></li><li><blockquote><p>It should still fail to jump to the symbol, but at least not crash anymore. Formatting should be fixed. <a class="btn" href="https://github.com/helix-editor/helix/issues/2430#issuecomment-1144441980"  target="_blank">Issue Commnet</a></p></blockquote></li><li>我也很奇怪这个诡异的 URI 是什么东西（x，等官方修复好了</li></ul></li></ul><p>Rust的<code>canonicalize()</code>方法返回的也是 UNC 路径，今天也被坑了一把（</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>editor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 wsl 中配置 zsh</title>
    <link href="/2022/10/08/%E5%9C%A8-wsl-%E4%B8%AD%E9%85%8D%E7%BD%AE-zsh/"/>
    <url>/2022/10/08/%E5%9C%A8-wsl-%E4%B8%AD%E9%85%8D%E7%BD%AE-zsh/</url>
    
    <content type="html"><![CDATA[<h2 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h2><h3 id="zsh-syntax-highlighting-插件的卡顿问题"><a href="#zsh-syntax-highlighting-插件的卡顿问题" class="headerlink" title="zsh-syntax-highlighting 插件的卡顿问题"></a><code>zsh-syntax-highlighting</code> 插件的卡顿问题</h3><p>原因在于该插件会把 Windows 的 PATH 一并读取，导致输入时会有明显的延迟。将 Windows 上的路径去掉就好（但是就不能直接调用 Windows 上的可执行文件了，虽然一般也用不到</p><p>在 <code>/etc/wsl.conf</code>中加入以下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[interop]</span><br><span class="hljs-attr">appendWindowsPath</span> = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 wsl 中安装 fedora</title>
    <link href="/2022/10/08/%E5%9C%A8-wsl-%E4%B8%AD%E5%AE%89%E8%A3%85-fedora/"/>
    <url>/2022/10/08/%E5%9C%A8-wsl-%E4%B8%AD%E5%AE%89%E8%A3%85-fedora/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Debian 虽然稳定，但里面的软件包也太陈旧了(</p><p>想一想作为桌面也没必要用得那么稳定？趁这个机会打算换一个新的发行版 van van</p><p>最后选择了 fedora（并不太想折腾 Arch</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="获取-fedora-镜像文件-rootfs-image"><a href="#获取-fedora-镜像文件-rootfs-image" class="headerlink" title="获取 fedora 镜像文件(rootfs image)"></a>获取 fedora 镜像文件(rootfs image)</h3><p>在</p><a class="btn" href="https://koji.fedoraproject.org/koji/packageinfo?packageID=26387"  target="_blank">Fedora-Container-Base</a><p>或</p><a class="btn" href="https://github.com/fedora-cloud/docker-brew-fedora"  target="_blank">fedora-cloud/docker-brew-fedora</a><p>中下载相应的镜像，解压后得到<code>xxx.tar</code>文件（设解压后地址为<code>$FEDORA_IMAGE_PATH</code>）</p><div class="note note-info">            <p>如何获取其他发行版的<code>rootfs</code>? </p><p><a class="btn" href="https://learn.microsoft.com/en-us/windows/wsl/use-custom-distro"  target="_blank">Import any Linux distribution to use with WSL</a></p>          </div><h3 id="在-wsl-中导入"><a href="#在-wsl-中导入" class="headerlink" title="在 wsl 中导入"></a>在 wsl 中导入</h3><p>创建存储目录<code>$WSL_STORE_PATH</code>，例如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$WSL_SOTRE_PATH</span> = <span class="hljs-string">&#x27;~/wsl/fedora&#x27;</span><br></code></pre></td></tr></table></figure><p>然后在wsl中导入，这里命名为<code>fedora</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--import</span> fedora <span class="hljs-variable">$WSL_STORE_PATH</span> <span class="hljs-variable">$FEDORA_IMAGE_PATH</span><br></code></pre></td></tr></table></figure><p>使用<code>wsl -d fedora</code>启动</p><h3 id="安装软件包与配置"><a href="#安装软件包与配置" class="headerlink" title="安装软件包与配置"></a>安装软件包与配置</h3><h4 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf update<br></code></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install -y passwd cracklib-dicts<br>useradd -G wheel <span class="hljs-variable">$USER_NAME</span><br>passwd <span class="hljs-variable">$USER_NAME</span><br></code></pre></td></tr></table></figure><p>设置 wsl 的默认登陆用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;[user]\ndefault=<span class="hljs-variable">$USER_NAME</span>&quot;</span> | <span class="hljs-built_in">tee</span> -a /etc/wsl.conf<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>可以使用<code>wsl -d fedora -u $USER_NAME</code>指定登录的用户</p>          </div><h4 id="其他软件包"><a href="#其他软件包" class="headerlink" title="其他软件包"></a>其他软件包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf install -y procps-ng iputils iproute ncurses findutils git<br></code></pre></td></tr></table></figure><table><thead><tr><th>软件包</th><th>作用</th></tr></thead><tbody><tr><td>procps-ng</td><td>提供与进程相关的命令，例如<code>top</code></td></tr><tr><td>iputils</td><td>提供<code>ping</code>命令</td></tr><tr><td>iproute</td><td>提供<code>ip</code>等命令</td></tr><tr><td>ncruses</td><td>TUI</td></tr><tr><td>findutils</td><td>查找</td></tr><tr><td>git</td><td>git</td></tr></tbody></table><div class="note note-info">            <p>配置不需要 root 权限的 ping</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sysctl -w net.ipv4.ping_group_range=<span class="hljs-string">&#x27;0 10&#x27;</span><br></code></pre></td></tr></table></figure><p>具体作用可以参考<a href="https://blog.lilydjwg.me/2013/10/29/non-privileged-icmp-ping.41390.html">不需要 root 权限的 ICMP ping</a></p><p><span class="label label-warning">配置可能会失效！<sup><a href="#sysctl-%E5%A4%B1%E6%95%88">⚓</a></sup></span></p>          </div><div class="note note-info">            <p><code>initscripts</code>这个 package 包括了 fedora 的一些启动脚本，例如网络等，但由于其基于<code>legacy System V</code>而非<code>systemd</code><sup><a href="#Systemd">⚓</a></sup>，因此这里没有安装</p>          </div><h4 id="配置-man-可选"><a href="#配置-man-可选" class="headerlink" title="配置 man(可选)"></a>配置 <code>man</code>(可选)</h4><p>确保<code>nodocs</code>没有开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -v nodocs /etc/dnf/dnf.conf | sudo <span class="hljs-built_in">tee</span> /etc/dnf/dnf.conf<br></code></pre></td></tr></table></figure><p>安装 <code>man</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf install -y man man-pages<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>之前已经安装的软件需要重新安装才能使用<code>man</code>查看文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> pkg <span class="hljs-keyword">in</span> $(dnf repoquery --installed --qf <span class="hljs-string">&quot;%&#123;name&#125;&quot;</span>); <span class="hljs-keyword">do</span> sudo dnf reinstall -qy <span class="hljs-variable">$pkg</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>可能会非常费时！</strong></p>          </div><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="挂载错误"><a href="#挂载错误" class="headerlink" title="挂载错误"></a>挂载错误</h3><blockquote><p>如果你在第一次启动 fedora 时得到了以下错误：</p><p><code>An error occurred mounting one of your file systems. Please run &#39;dmesg&#39; for more details.</code></p><p>这是由于系统缺少 mount 指令造成的，如果你不需要 mount 指令也不在意错误，完全可以忽略这个错误（虽然还是建议修一下）。</p><p>安装 util-linux 这个包即可。（如果你是一个极简主义者，安装 util-linux-core 这个包）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf install -y util-linux-core<br></code></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><blockquote><p>如果你需要运行容器，重新安装 shadow-utils 确保修复一些 rootfs 带来的错误：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf reinstall -y shadow-utils<br></code></pre></td></tr></table></figure><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><blockquote><p>To be able to setup the locale within fedora you need systemd. To get around this you can use the following (substitute en, en_US with your locale strings):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf -y install glibc-common glibc-locale-source glibc-langpack-en<br>localedef --force -f UTF-8 -i en_US en_US.UTF-8<br></code></pre></td></tr></table></figure><p>Additionally, you may want to install your locale resources, sucha as:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf -y install langpacks-core-en_US langpacks-en_US man-pages-en_US<br></code></pre></td></tr></table></figure><p>And don´t forget to check and change if necessary &#x2F;etc&#x2F;locale.conf and &#x2F;etc&#x2F;locales.conf</p></blockquote><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>通常来讲，wsl 会自动设置dns，自动配置<code>/etc/resolv.conf</code></p><p>如果 DNS 不能工作的话，就要自己进行配置</p><h4 id="禁用-wsl-自动生成resolv-conf"><a href="#禁用-wsl-自动生成resolv-conf" class="headerlink" title="禁用 wsl 自动生成resolv.conf"></a>禁用 wsl 自动生成<code>resolv.conf</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;[network]\ngenerateResolvConf = false&quot;</span> &gt; /etc/wsl.conf<br></code></pre></td></tr></table></figure><h4 id="添加-DNS-配置"><a href="#添加-DNS-配置" class="headerlink" title="添加 DNS 配置"></a>添加 DNS 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unlink</span> /etc/resolv.conf<br><span class="hljs-built_in">echo</span> nameserver 1.1.1.1 &gt; /etc/resolv.conf<br></code></pre></td></tr></table></figure><h4 id="可能出现问题的原因"><a href="#可能出现问题的原因" class="headerlink" title="可能出现问题的原因"></a>可能出现问题的原因</h4><blockquote><p>Apparently, Fedora 33 uses systemd-resolvd, and when we upgrade packages with dnf upgrade something was overwriting &#x2F;etc&#x2F;resolv.conf with a link to &#x2F;run&#x2F;systemd&#x2F;resolve&#x2F;stub-resolv.conf which didn’t actually exist.</p></blockquote><h3 id="sysctl-失效"><a href="#sysctl-失效" class="headerlink" title="sysctl 失效"></a>sysctl 失效</h3><blockquote><p>sysctl won’t persist after WSL reboot. You can set kernel parameters using C:\Users\username.config or &#x2F;etc&#x2F;wsl.conf (Windows 11 only). <a class="btn" href="https://github.com/microsoft/WSL/issues/4232#issuecomment-1233345818"  target="_blank">Issue Comment</a></p><p>Seems like you would need to use absolute path to sysctl if you are editing wsl.conf tho because sysctl is not loaded to $PATH yet.  <a class="btn" href="https://github.com/microsoft/WSL/issues/4232#issuecomment-1250009979"  target="_blank">Issue Comment</a></p></blockquote><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存文件</span><br>sudo dnf clean all<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 导出</span><br>wsl <span class="hljs-literal">--export</span> fedora <span class="hljs-variable">$EXPORT_PATH</span><br></code></pre></td></tr></table></figure><h2 id="更新系统-1"><a href="#更新系统-1" class="headerlink" title="更新系统 "></a>更新系统 <a class="btn" href="https://fedoraproject.org/wiki/Upgrading_from_pre-release_to_final#Performing_the_upgrade"  target="_blank">🔗</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf upgrade<br></code></pre></td></tr></table></figure><h2 id="Systemd"><a href="#Systemd" class="headerlink" title="Systemd"></a>Systemd</h2><!-- TODO --><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dev.to/bowmanjd/install-fedora-on-windows-subsystem-for-linux-wsl-4b26">Install Fedora 36 or earlier on Windows Subsystem for Linux (WSL) </a><br><a href="https://aimerneige.com/zh/post/install-fedora35-on-wsl/">在 wsl 下安装 fedora 35</a><br><a href="https://zhuanlan.zhihu.com/p/303158815">通过微软的 WSL2 使用 Fedora 33 | Linux 中国</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git for Windows</title>
    <link href="/2022/10/07/Git-for-Windows/"/>
    <url>/2022/10/07/Git-for-Windows/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近又又又在Windows上配置Git，在这里记录一些Tips</p><h2 id="SigningKey"><a href="#SigningKey" class="headerlink" title="SigningKey"></a>SigningKey</h2><h3 id="配置文档"><a href="#配置文档" class="headerlink" title="配置文档"></a><a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification">配置文档</a></h3><p>一般来讲，在Github上配置ssh再配合<code>ssh config</code>通常情况下已经能用了（</p><p>但使用ssh key对commit进行签名时，必须使用<code>ssh-agent</code>（否则会直接Error，这样就只能在Git Bash里操作</p><p>有没有办法让 git 使用 Windows 自带的 OpenSSH 呢？</p><p>经过一番查找，发现在安装是是可以配置的</p><blockquote><ol><li>Reinstall git with “Use external OpenSSH” (untick “Only show new options” during the installation start)</li><li>Update Window’s OpenSSH to 8.6; (repo, tutorial); without it it showed Unsupported certificate option “verify-time&#x3D;20220125190555” when browsing commits with git show –show-signature<br><a href="https://superuser.com/questions/1695601/use-ssh-key-signing-with-git-and-ssh-agent-under-windows">Use SSH key signing with Git and ssh-agent under Windows</a></li></ol></blockquote><div class="note note-info">            <p>这里配置环境变量<code>GIT_SSH</code>或git的全局配置<code>core.sshcommand</code>是没有用的</p>          </div><h3 id="那么-Portable-Version-该怎么办呢（"><a href="#那么-Portable-Version-该怎么办呢（" class="headerlink" title="那么 Portable Version 该怎么办呢（"></a>那么 Portable Version 该怎么办呢（</h3><p><del>经过比对两个版本的文件，我怀疑这个没法配置😇</del></p><blockquote><p>Post-installation, or if using the portable version, to make Git For Windows utilise an external OpenSSH client, remove the bundled OpenSSH binaries. They are typically located in &#x2F;usr&#x2F;bin&#x2F;, relative to the installation directory or root folder of the portable version. The bundled OpenSSH implementation is represented by the binaries listed below. On Windows they will have the .exe extension. <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="">[1]</span></a></sup></p></blockquote><h2 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h2><h3 id="查看配置及配置文件路径"><a href="#查看配置及配置文件路径" class="headerlink" title="查看配置及配置文件路径"></a>查看配置及配置文件路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --list --show-origin --show-scope<br></code></pre></td></tr></table></figure><h2 id="一些-Git-配置"><a href="#一些-Git-配置" class="headerlink" title="一些 Git 配置"></a>一些 Git 配置</h2><p><a href="https://town.korandoru.io/individuals/git-bootcamp">Git 基本配置与常用技巧</a></p><h3 id="默认对-commit-进行签名"><a href="#默认对-commit-进行签名" class="headerlink" title="默认对 commit 进行签名"></a>默认对 commit 进行签名</h3><blockquote><p>To configure your Git client to sign commits by default for a local repository, in Git versions 2.0.0 and above, run git config commit.gpgsign true. To sign all commits by default in any local repository on your computer, run git config –global commit.gpgsign true.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/git-for-windows/git/wiki/Using-an-external-OpenSSH-client">https://github.com/git-for-windows/git/wiki/Using-an-external-OpenSSH-client</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大杂烩</title>
    <link href="/2022/06/04/%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    <url>/2022/06/04/%E5%A4%A7%E6%9D%82%E7%83%A9/</url>
    
    <content type="html"><![CDATA[<p>记录发现的一些巨佬的博客和一些乱七八糟的东西（</p><h1 id="教程与学习资料"><a href="#教程与学习资料" class="headerlink" title="教程与学习资料"></a>教程与学习资料</h1><p><a href="https://github.com/uber-go/guide">uber-go&#x2F;guide</a> : Go style guide</p><h2 id="Game-Dev"><a href="#Game-Dev" class="headerlink" title="Game-Dev"></a>Game-Dev</h2><p><a href="https://yiviv.com/bevy-cheatbook/">Bevy 游戏引擎开发指南</a><br><a href="https://itch.io/">itch.io</a></p><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p><a href="https://github.com/skywind3000/awesome-cheatsheets/blob/master/editors/vim.txt">awesome-cheatsheets&#x2F;editors&#x2F;vim.txt</a> : Vim 常用快捷键</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p><a href="https://javascript.info/">The Modern JavaScript Tutorial</a> : JS 教程</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference">CSS参考</a> : CSS 参考</p><h2 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h2><p><a href="https://zhuanlan.zhihu.com/p/455688955">如何安装 Haskell 工具链（2022 年版）</a> : Haskell 安装教程（ghcup）</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><a href="http://www.linux-commands-examples.com/">linux commands examples</a> : Linux 命令行示例<br><a href="https://archlinuxstudio.github.io/ArchLinuxTutorial/">Arch Linux 安装使用教程</a> : Arch 安装教程</p><h2 id="CMAKE"><a href="#CMAKE" class="headerlink" title="CMAKE"></a>CMAKE</h2><p><a href="https://blog.xizhibei.me/tags/CMake/">CMake 须臾之学</a> : CMake 基础教程<br><a href="https://github.com/ttroy50/cmake-examples">CMake-Examples</a> : CMake 基础教程<br><a href="https://zhuanlan.zhihu.com/p/116953293">CMake 管理项目的release和debug</a> : CMake 的 <code>Release</code> <code>Debug</code> 在 <code>single configuration</code> 和 <code>multi configuration</code> 中不同！</p><h1 id="知识社区"><a href="#知识社区" class="headerlink" title="知识社区"></a>知识社区</h1><p><a href="https://learnku.com/">LearnKu</a> : 各种教程和文章<br><a href="https://tinylab.org/">泰晓科技</a> : 关于 Linux<br><a href="https://www.geeksforgeeks.org/">GeeksforGeeks</a> : 计算机知识<br><a href="https://hackertalk.net/">黑客说 - 技术驱动优质交流</a> : 知识交流<br><a href="https://www.shadertoy.com/">Shadertoy</a> : 构建和分享世界上你最喜欢的着色器并受启发</p><h1 id="playground"><a href="#playground" class="headerlink" title="playground"></a>playground</h1><p><a href="https://play.rust-lang.org/">Rust</a><br><a href="https://godbolt.org/">C++</a></p><h1 id="好看的博客"><a href="#好看的博客" class="headerlink" title="好看的博客"></a>好看的博客</h1><p><a href="https://github.com/BNDong/Cnblogs-Theme-SimpleMemory">Simple Memory</a><br><a href="https://github.com/volantis-x/hexo-theme-volantis">volantis</a><br><a href="https://github.com/dillonzq/LoveIt">LoveIt</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="笔记本"><a href="#笔记本" class="headerlink" title="笔记本"></a>笔记本</h2><ul><li><a href="https://logseq.com/">logseq</a></li><li><a href="https://www.notion.so/zh-cn">notion</a></li><li><a href="https://obsidian.md/">obsidian</a></li><li><a href="https://www.zotero.org/">zotero</a></li><li><a href="https://apps.ankiweb.net/">anki</a></li><li><a href="https://joplinapp.org/">joplin</a></li></ul><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ul><li><a href="https://kakoune.org/">Kakoune code editor</a></li><li><a href="https://github.com/helix-editor/helix">Helix</a></li></ul><h2 id="PDF阅读器"><a href="#PDF阅读器" class="headerlink" title="PDF阅读器"></a>PDF阅读器</h2><ul><li><a href="https://okular.kde.org/">Okular</a></li><li><a href="https://github.com/sumatrapdfreader/sumatrapdf">SumatraPDF</a></li></ul><h2 id="图像处理与绘画软件"><a href="#图像处理与绘画软件" class="headerlink" title="图像处理与绘画软件"></a>图像处理与绘画软件</h2><ul><li><a href="https://www.gimp.org/">Gimp</a></li><li><a href="https://inkscape.org/">Inkscape</a></li><li><a href="https://krita.org/zh/">Krita</a></li><li><a href="https://www.clipstudio.net/">CSP</a>]</li></ul><h2 id="视频处理"><a href="#视频处理" class="headerlink" title="视频处理"></a>视频处理</h2><ul><li><a href="https://kdenlive.org/">Kdenlive</a></li><li><a href="https://www.blackmagicdesign.com/cn/products/davinciresolve/">Davinci Resolve</a></li></ul><h2 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h2><ul><li><a href="https://penpot.app/">penpot</a></li></ul><h2 id="窗口管理器"><a href="#窗口管理器" class="headerlink" title="窗口管理器"></a>窗口管理器</h2><p><a href="https://github.com/LGUG2Z/komorebi">komorebi</a> : A tiling window manager for Windows </p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大杂烩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nvim 配置</title>
    <link href="/2022/06/03/nvim-%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/06/03/nvim-%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>VS Code 的 vim 插件仍然相当难用，打算改用 nvim 试试水（<br>然而还是相当折磨:(</p><h1 id="Rust-自动补全"><a href="#Rust-自动补全" class="headerlink" title="Rust 自动补全"></a>Rust 自动补全</h1><p>网上能找到的配置大多数都没有配置 auto import，导致网上随便找个配置用的时候自动补全只能补全已经导入的模块，相当的离谱（<br>最后在 <code>nvim-comp</code> 中找到了配置方法（然而写这篇文章的时候已经不推荐用这个了<br>在 <code>lspconfig</code> 中加入以下代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- https://github.com/hrsh7th/nvim-compe</span><br><span class="hljs-keyword">local</span> capabilities = vim.lsp.protocol.make_client_capabilities()<br>capabilities.textDocument.completion.completionItem.snippetSupport = <span class="hljs-literal">true</span><br>capabilities.textDocument.completion.completionItem.resolveSupport = &#123;<br>  properties = &#123;<br>    <span class="hljs-string">&#x27;documentation&#x27;</span>,<br>    <span class="hljs-string">&#x27;detail&#x27;</span>,<br>    <span class="hljs-string">&#x27;additionalTextEdits&#x27;</span>,<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">require</span><span class="hljs-string">&#x27;lspconfig&#x27;</span>.rust_analyzer.setup &#123;<br>  capabilities = capabilities,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>LSP and performance implications</p><p>The feature is enabled only if the LSP client supports LSP protocol version 3.16+ and reports the additionalTextEdits (case-sensitive) resolve client capability in its client capabilities. This way the server is able to defer the costly computations, doing them for a selected completion item only. For clients with no such support, all edits have to be calculated on the completion request, including the fuzzy search completion ones, which might be slow ergo the feature is automatically disabled.</p><p>参考：<a href="https://rust-analyzer.github.io/manual.html#completion-with-autoimport">https://rust-analyzer.github.io/manual.html#completion-with-autoimport</a></p></blockquote><p>直接使用 <code>rust-tool.nvim</code> 一劳永逸</p><h1 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h1><p>默认按键 <code>Ctrl-N</code> | <code>Ctrl-P</code> 可能会和标准的补全冲突，因此在配置 <code>nvim-cmp</code> 的时候注意映射（<br>比如在命令行补全的时候发生的冲突（</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> cmp = <span class="hljs-built_in">require</span><span class="hljs-string">&#x27;cmp&#x27;</span><br>cmp.setup(&#123;<br>    snippet = &#123;<br>        <span class="hljs-comment">-- REQUIRED - you must specify a snippet engine</span><br>        expand = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(args)</span></span><br>        <span class="hljs-comment">-- luasnip</span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;luasnip&#x27;</span>).lsp_expand(args.body)<br>        <span class="hljs-comment">-- vsnip</span><br>        <span class="hljs-comment">-- vim.fn[&quot;vsnip#anonymous&quot;](args.body)</span><br>        <span class="hljs-comment">-- snippy</span><br>        <span class="hljs-comment">-- require(&#x27;snippy&#x27;).expand_snippet(args.body)</span><br>        <span class="hljs-comment">-- ultisnip</span><br>        <span class="hljs-comment">-- vim.fn[&quot;UltiSnips#Anon&quot;](args.body)</span><br>        <span class="hljs-keyword">end</span>,<br>    &#125;,<br>    mapping = cmp.mapping.preset.<span class="hljs-built_in">insert</span>(&#123;<br>        [<span class="hljs-string">&#x27;&lt;C-b&gt;&#x27;</span>] = cmp.mapping(cmp.mapping.scroll_docs(<span class="hljs-number">-4</span>)),<br>        [<span class="hljs-string">&#x27;&lt;C-f&gt;&#x27;</span>] = cmp.mapping(cmp.mapping.scroll_docs(<span class="hljs-number">4</span>)),<br>        [<span class="hljs-string">&#x27;&lt;C-Space&gt;&#x27;</span>] = cmp.mapping(cmp.mapping.complete()),<br>        [<span class="hljs-string">&#x27;&lt;C-y&gt;&#x27;</span>] = cmp.<span class="hljs-built_in">config</span>.disable,<br>        [<span class="hljs-string">&#x27;&lt;C-e&gt;&#x27;</span>] = cmp.mapping(&#123;<br>            i = cmp.mapping.abort(),<br>            c = cmp.mapping.<span class="hljs-built_in">close</span>(),<br>        &#125;),<br>        <span class="hljs-comment">-- &lt;C-n&gt; &lt;C-p&gt; &lt;Tab&gt; 可能会使用标准的补全</span><br>        [<span class="hljs-string">&#x27;&lt;C-n&gt;&#x27;</span>] = cmp.mapping(cmp.mapping.select_next_item(), &#123;<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;),<br>        [<span class="hljs-string">&#x27;&lt;C-p&gt;&#x27;</span>] = cmp.mapping(cmp.mapping.select_prev_item(), &#123;<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;),<br>        <br>        <span class="hljs-comment">-- Accept currently selected item...</span><br>        <span class="hljs-comment">-- Set `select` to `false` to only confirm explicitly selected items:</span><br>        [<span class="hljs-string">&#x27;&lt;CR&gt;&#x27;</span>] = cmp.mapping.confirm(&#123;<br>            behavior = cmp.ConfirmBehavior.Replace,<br>            <span class="hljs-built_in">select</span> = <span class="hljs-literal">true</span>, <br>        &#125;),<br>    &#125;),<br>    sources = cmp.<span class="hljs-built_in">config</span>.sources(&#123;<br>        &#123; name = <span class="hljs-string">&#x27;nvim_lsp&#x27;</span> &#125;,<br>        <span class="hljs-comment">-- &#123; name = &#x27;luasnip&#x27; &#125;, -- For luasnip users.</span><br>        <span class="hljs-comment">-- &#123; name = &#x27;ultisnips&#x27; &#125;, -- For ultisnips users.</span><br>        <span class="hljs-comment">-- &#123; name = &#x27;snippy&#x27; &#125;, -- For snippy users.</span><br>    &#125;, &#123;&#123; name = <span class="hljs-string">&#x27;buffer&#x27;</span> &#125;&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="诊断信息没有配色"><a href="#诊断信息没有配色" class="headerlink" title="诊断信息没有配色"></a>诊断信息没有配色</h1><p>注意使用的主题</p><h1 id="自动显示诊断信息"><a href="#自动显示诊断信息" class="headerlink" title="自动显示诊断信息"></a>自动显示诊断信息</h1><p>在 <a href="https://sharksforarms.dev/posts/neovim-rust/">Neovim and Rust</a> 的这篇教程中，通过</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; Set updatetime for CursorHold</span><br><span class="hljs-comment">&quot; 300ms of no cursor movement to trigger CursorHold</span><br><span class="hljs-keyword">set</span> updatetime=<span class="hljs-number">300</span><br><span class="hljs-comment">&quot; Show diagnostic popup on cursor hold</span><br><span class="hljs-keyword">autocmd</span> CursorHold * <span class="hljs-keyword">lua</span> <span class="hljs-keyword">vim</span>.diagnostic.open_float(nil, &#123; focusable = false &#125;)<br></code></pre></td></tr></table></figure><p>来设置光标停留时自动显示 Warning、Error、Hint等信息。</p><p>但是在实际使用中时，该方法会覆盖其他窗口的信息。例如，使用 <code>vim.lsp.buf.hover()</code> 或 <code>vim.lsp.buf.signature_help()</code> 来显示函数信息时，诊断信息会覆盖来自 lsp 显示的信息。</p><p>目前没有找到解决方案，临时解决方法为通过快捷键调出信息，而不适用 <code>autocmd</code>。但在 <code>Insert Mode</code> 限制函数的签名。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; Show diagnostic popup on cursor hold</span><br><span class="hljs-comment">&quot; autocmd CursorHold * lua vim.diagnostic.open_float(nil, &#123; focusable = false &#125;)</span><br><span class="hljs-keyword">autocmd</span> CursorHoldI * <span class="hljs-keyword">lua</span> <span class="hljs-keyword">vim</span>.lsp.buf.signature_help()<br></code></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>来自 2022&#x2F;10&#x2F;26 的更新</p><p>目前重新fork别人的配置修改使用，大问题基本没有了（</p><blockquote><p>参考<br><a href="https://www.reddit.com/r/neovim/comments/tvy18v/check_if_floating_window_exists/">Check if floating window exists?</a><br><a href="https://www.reddit.com/r/neovim/comments/s3ykd2/diagnostic_on_hover_workaround_available/">Diagnostic on hover workaround available?</a><br><a href="https://github.com/neovim/nvim-lspconfig/wiki/UI-Customization#customizing-how-diagnostics-are-displayed">Customizing how diagnostics are displayed</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>editor</tag>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quarkus+Gradle+Kotlin搭建</title>
    <link href="/2022/04/10/Quarkus-Gradle-Kotlin%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/04/10/Quarkus-Gradle-Kotlin%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正好学了 Kotlin 想新学一门后端框架来练手，最后在 Vertx&#x2F;Ktor&#x2F;Quarakus 里面选了 Quarkus。<br>其实感觉选 SpringBoot 更好，但 SpringBoot 3 快出了并且 Spring 的文档写的好烂，以后再学（x</p><p>这里主要记录下 Gradle 的配置以及遇到的坑X﹏X</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>可以直接使用 <code>quarkus-cli</code> 生成了，方便点（</p><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pwsh">scoop install quarkus<span class="hljs-literal">-cli</span><br><br>quarkus create app org.acme:rest<span class="hljs-literal">-kotlin-quickstart</span> <span class="hljs-literal">--extension</span>=<span class="hljs-string">&#x27;kotlin,resteasy-reactive-jackson&#x27;</span> <span class="hljs-literal">--gradle-kotlin-dsl</span><br><br><span class="hljs-built_in">cd</span> rest<span class="hljs-literal">-kotlin-quickstart</span><br></code></pre></td></tr></table></figure><h2 id="settings-gradle-kts"><a href="#settings-gradle-kts" class="headerlink" title="settings.gradle.kts"></a>settings.gradle.kts</h2><figure class="highlight kts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kts">pluginManagement &#123;<br>    <span class="hljs-keyword">val</span> quarkusPluginVersion: String <span class="hljs-keyword">by</span> settings<br>    <span class="hljs-keyword">val</span> quarkusPluginId: String <span class="hljs-keyword">by</span> settings<br>    repositories &#123;<br>        mavenLocal()<br>        mavenCentral()<br>        gradlePluginPortal()<br>    &#125;<br>    plugins &#123;<br>        id(quarkusPluginId) version quarkusPluginVersion<br>    &#125;<br>&#125;<br>rootProject.name=<span class="hljs-string">&quot;quarkus-learn&quot;</span><br></code></pre></td></tr></table></figure><h2 id="build-gradle-kts"><a href="#build-gradle-kts" class="headerlink" title="build.gradle.kts"></a>build.gradle.kts</h2><figure class="highlight kts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs kts">plugins &#123;<br>    kotlin(<span class="hljs-string">&quot;jvm&quot;</span>) version <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;kotlin_version&#125;</span>&quot;</span><br>    kotlin(<span class="hljs-string">&quot;plugin.allopen&quot;</span>) version <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;kotlin_version&#125;</span>&quot;</span><br>    id(<span class="hljs-string">&quot;io.quarkus&quot;</span>)<br>&#125;<br><br>repositories &#123;<br>    mavenCentral()<br>    mavenLocal()<br>&#125;<br><br><span class="hljs-keyword">val</span> quarkusPlatformGroupId: String <span class="hljs-keyword">by</span> project<br><span class="hljs-keyword">val</span> quarkusPlatformArtifactId: String <span class="hljs-keyword">by</span> project<br><span class="hljs-keyword">val</span> quarkusPlatformVersion: String <span class="hljs-keyword">by</span> project<br><br>dependencies &#123;<br>    implementation(enforcedPlatform(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;quarkusPlatformGroupId&#125;</span>:<span class="hljs-subst">$&#123;quarkusPlatformArtifactId&#125;</span>:<span class="hljs-subst">$&#123;quarkusPlatformVersion&#125;</span>&quot;</span>))<br>    implementation(<span class="hljs-string">&quot;io.quarkus:quarkus-kotlin&quot;</span>)<br>    implementation(<span class="hljs-string">&quot;io.quarkus:quarkus-resteasy-reactive-jackson&quot;</span>)<br>    implementation(<span class="hljs-string">&quot;io.quarkus:quarkus-arc&quot;</span>)<br>    implementation(<span class="hljs-string">&quot;io.quarkus:quarkus-resteasy-reactive&quot;</span>)<br>    testImplementation(<span class="hljs-string">&quot;io.quarkus:quarkus-junit5&quot;</span>)<br>    testImplementation(<span class="hljs-string">&quot;io.rest-assured:rest-assured&quot;</span>)<br>&#125;<br><br>group = <span class="hljs-string">&quot;org.example&quot;</span><br>version = <span class="hljs-string">&quot;1.0.0-SNAPSHOT&quot;</span><br><br>allOpen &#123;<br>    <span class="hljs-keyword">annotation</span>(<span class="hljs-string">&quot;javax.ws.rs.Path&quot;</span>)<br>    <span class="hljs-keyword">annotation</span>(<span class="hljs-string">&quot;javax.enterprise.context.ApplicationScoped&quot;</span>)<br>    <span class="hljs-keyword">annotation</span>(<span class="hljs-string">&quot;io.quarkus.test.junit.QuarkusTest&quot;</span>)<br>&#125;<br><br>tasks.withType&lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile&gt; &#123;<br>    kotlinOptions.jvmTarget = JavaVersion.VERSION_17.toString()<br>    kotlinOptions.javaParameters = <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gradle --console=plain quarkusDev<br></code></pre></td></tr></table></figure><h2 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h2><p><a href="https://code.quarkus.io/">QUARKUS - CONFIGURE YOUR APPLICATION</a></p><h1 id="途中遇到的坑"><a href="#途中遇到的坑" class="headerlink" title="途中遇到的坑"></a>途中遇到的坑</h1><h2 id="Kotlin-和-Java-混编时注意类名！"><a href="#Kotlin-和-Java-混编时注意类名！" class="headerlink" title="Kotlin 和 Java 混编时注意类名！"></a>Kotlin 和 Java 混编时注意类名！</h2><p>血与泪的教训！！编译和运行时都不会报错和警告，但就是找不到 URL。</p><blockquote><p><a href="https://stackoverflow.com/questions/44879430/why-does-kotlin-allow-having-two-classes-with-same-name-and-package-in-different">why-does-kotlin-allow-having-two-classes-with-same-name-and-package-in-different</a></p></blockquote><h2 id="仓库初始化"><a href="#仓库初始化" class="headerlink" title="仓库初始化"></a>仓库初始化</h2><p>使用 maven 初始化，注意这里在 Windows 上（不管是 powershell 还是 cmd），参数都需要用引号括起来，否则会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn io.quarkus.platform:quarkus-maven-plugin:2.7.5.Final:create <span class="hljs-string">&quot;-DprojectGroupId=org.acme&quot;</span> <span class="hljs-string">&quot;-DprojectArtifactId=getting-started&quot;</span> <span class="hljs-string">&#x27;-Dextensions=&quot;resteasy&quot;&#x27;</span> <span class="hljs-string">&quot;-DbuildTool=gradle-kotlin-dsl&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>For Windows users<br>If using cmd , (don’t use backward slash \ and put everything on the same line)<br>If using Powershell , wrap -D parameters in double quotes e.g. “-DprojectArtifactId&#x3D;getting-started”</p></blockquote><p>并且，pwsh当前会把<code>.</code>当成分隔符，产生奇怪的现象 <a href="https://github.com/PowerShell/PowerShell/issues/15541">Issue#15541</a></p><p>但测试的时候发现<code>=</code>和<code>-</code>都没有分隔，以上问题应该不需要再用括号括起来了（没试，或者如果被包成了<code>cmd</code>不知道<code>cmd</code>那里还需不需要特殊处理</p><p>可以使用 <code>--</code> 或 <code>--%</code> <a class="btn" href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-7.2"  target="_blank">About Parsing</a></p><p>我在测试的时候发现 <code>--</code> 会传递给程序但 <code>--%</code>不会，迷惑</p><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pwsh"><span class="hljs-variable">$</span> pwsh <span class="hljs-literal">--version</span><br>PowerShell <span class="hljs-number">7.2</span>.<span class="hljs-number">7</span><br><span class="hljs-variable">$</span> .\echoargs.exe foo <span class="hljs-literal">--</span> bar <span class="hljs-literal">--</span><br>[<span class="hljs-type">src</span>\<span class="hljs-type">main.rs</span>:<span class="hljs-number">5</span>] args = [<br>    <span class="hljs-string">&quot;D:\\workspace\\echoargs\\target\\debug\\echoargs.exe&quot;</span>,<br>    <span class="hljs-string">&quot;foo&quot;</span>,<br>    <span class="hljs-string">&quot;--&quot;</span>,<br>    <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-string">&quot;--&quot;</span>,<br>]<br><span class="hljs-variable">$</span> .\echoargs.exe foo <span class="hljs-literal">--</span>% bar<br>[<span class="hljs-type">src</span>\<span class="hljs-type">main.rs</span>:<span class="hljs-number">5</span>] args = [<br>    <span class="hljs-string">&quot;D:\\workspace\\echoargs\\target\\debug\\echoargs.exe&quot;</span>,<br>    <span class="hljs-string">&quot;foo&quot;</span>,<br>    <span class="hljs-string">&quot;bar&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// echoargs.exe</span><br><span class="hljs-keyword">use</span> std::env;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">args</span> = env::<span class="hljs-title function_ invoke__">args</span>().collect::&lt;<span class="hljs-type">Vec</span>&lt;_&gt;&gt;();<br>    dbg!(args);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Quarkus</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust中与链接相关问题</title>
    <link href="/2022/04/07/Rust%E4%B8%AD%E4%B8%8E%E9%93%BE%E6%8E%A5%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/07/Rust%E4%B8%AD%E4%B8%8E%E9%93%BE%E6%8E%A5%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天突发奇想想试试 Rust 的交叉编译，然后掉进大坑(x</p><h1 id="rust-lld"><a href="#rust-lld" class="headerlink" title="rust-lld"></a>rust-lld</h1><p>Linux 中目前不可以直接使用 rust-lld，原因如下可以看这里<a href="https://github.com/rust-lang/rust/issues/71519">Support feeding rust-lld into gcc (and clang)</a></p><p>如果直接在 linker 里写 rust-lld 会导致 Segment Fault，如果直接写 ld 会出现 no such file or directory。（Rust 中默认使用的是 cc）</p><p>使用<code>-fuse-ld=lld</code>进行配置后仍然无法直接使用 rust-lld，<code>cc</code>在进行链接时仍会出现<a href="https://users.rust-lang.org/t/cannot-find-ld-when-using-lld/47420">Cannot find ‘ld’ when using ‘lld’</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/rust-lang/rust/issues/71519">Support feeding rust-lld into gcc (and clang)</a><br><a href="https://users.rust-lang.org/t/cannot-find-ld-when-using-lld/47420">Cannot find ‘ld’ when using ‘lld’</a><br><a href="https://github.com/rust-lang/rust/issues/82172">-Clink-arg&#x3D;-fuse-ld&#x3D;lld reports ‘cannot find ld’</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
      <tag>链接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 9-17 中的新特性</title>
    <link href="/2022/03/18/java-language-changes-9-17/"/>
    <url>/2022/03/18/java-language-changes-9-17/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-9"><a href="#Java-9" class="headerlink" title="Java 9"></a>Java 9</h1><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h2 id="改进的-try-语句"><a href="#改进的-try-语句" class="headerlink" title="改进的 try 语句"></a>改进的 try 语句</h2><p>如果变量为 final 或 有效 final(即变量初始化后不再发生改变), 则可在 try-with-resources 中使用该变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java 9+</span><br><br><span class="hljs-comment">// A final resource</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">Resource</span> <span class="hljs-variable">resource1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resource</span>(<span class="hljs-string">&quot;resource1&quot;</span>);<br><span class="hljs-comment">// An effectively final resource</span><br><span class="hljs-type">Resource</span> <span class="hljs-variable">resource2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resource</span>(<span class="hljs-string">&quot;resource2&quot;</span>);<br><br><span class="hljs-comment">// New and improved try-with-resources statement in Java SE 9</span><br><span class="hljs-keyword">try</span> (resource1;<br>        resource2) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java 7 or Java 8</span><br><br><span class="hljs-keyword">try</span> (<span class="hljs-type">Resource</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> resource1;<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> resource2) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="支持接口私有方法"><a href="#支持接口私有方法" class="headerlink" title="支持接口私有方法"></a>支持接口私有方法</h2><p>Java 9 中允许接口使用私有方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">T</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="钻石操作符及匿名内部类"><a href="#钻石操作符及匿名内部类" class="headerlink" title="钻石操作符及匿名内部类"></a>钻石操作符及匿名内部类</h2><p>即泛型操作符现在可以在匿名内部类上使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;()&#123;&#125;;<br></code></pre></td></tr></table></figure><h2 id="现在不是一个合法的标识符"><a href="#现在不是一个合法的标识符" class="headerlink" title="_ 现在不是一个合法的标识符"></a>_ 现在不是一个合法的标识符</h2><p>Java 9 中，如果在程序中使用 _ 作为标识符，则程序不能通过编译。</p><h2 id="SafeVarargs-现在可以在私有方法中使用"><a href="#SafeVarargs-现在可以在私有方法中使用" class="headerlink" title="@SafeVarargs 现在可以在私有方法中使用"></a><code>@SafeVarargs</code> 现在可以在私有方法中使用</h2><p><code>@SafeVarargs</code> 可以在不能被覆写的方法上使用，包括：</p><ul><li>静态方法</li><li>final</li><li>私有方法</li></ul><p><a href="https://www.cnblogs.com/springmorning/p/10285780.html">@SafeVarargs</a></p><h2 id="JShell"><a href="#JShell" class="headerlink" title="JShell"></a>JShell</h2><p>Java 的 REPL 工具</p><h2 id="新的-Http-客户端"><a href="#新的-Http-客户端" class="headerlink" title="新的 Http 客户端"></a>新的 Http 客户端</h2><p>Java 9 中使用 HttpClient</p><h1 id="Java-10-x2F-11"><a href="#Java-10-x2F-11" class="headerlink" title="Java 10&#x2F;11"></a>Java 10&#x2F;11</h1><h2 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h2><p>Java 10中引入，在 Java 11 中可在 lambda 表达式中使用。<br><a href="https://zhuanlan.zhihu.com/p/34911982">Java 10 新特性之局部变量类型推断</a><br><a href="http://openjdk.java.net/projects/amber/guides/lvti-style-guide">Local Variable Type Inference Style Guidelines</a><br><a href="https://openjdk.java.net/jeps/323">Local-Variable Syntax for Lambda Parameters</a></p><h1 id="Java-12"><a href="#Java-12" class="headerlink" title="Java 12"></a>Java 12</h1><h2 id="switch-表达式"><a href="#switch-表达式" class="headerlink" title="switch 表达式"></a>switch 表达式</h2><p>计算一个值，且可以将其用于 statement 中。同时引入新的 case 标签来消除 switch 中的 break 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// case label</span><br><span class="hljs-keyword">case</span> label_1, label_2, ..., label_n -&gt; expression;|<span class="hljs-keyword">throw</span>-statement;|block <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java 12 之前</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Day</span> &#123; SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY; &#125;<br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">numLetters</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">Day</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> Day.WEDNESDAY;<br><span class="hljs-keyword">switch</span> (day) &#123;<br>    <span class="hljs-keyword">case</span> MONDAY:<br>    <span class="hljs-keyword">case</span> FRIDAY:<br>    <span class="hljs-keyword">case</span> SUNDAY:<br>        numLetters = <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TUESDAY:<br>        numLetters = <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> THURSDAY:<br>    <span class="hljs-keyword">case</span> SATURDAY:<br>        numLetters = <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> WEDNESDAY:<br>        numLetters = <span class="hljs-number">9</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Invalid day: &quot;</span> + day);<br>&#125;<br>System.out.println(numLetters);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java 12</span><br><span class="hljs-type">Day</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> Day.WEDNESDAY;    <br>System.out.println(<br>    <span class="hljs-keyword">switch</span> (day) &#123;<br>        <span class="hljs-keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">case</span> TUESDAY                -&gt; <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">case</span> THURSDAY, SATURDAY     -&gt; <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">case</span> WEDNESDAY              -&gt; <span class="hljs-number">9</span>;<br>        <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Invalid day: &quot;</span> + day);<br>    &#125;<br>); <br></code></pre></td></tr></table></figure><h1 id="Java-13"><a href="#Java-13" class="headerlink" title="Java 13"></a>Java 13</h1><h2 id="Text-Block"><a href="#Text-Block" class="headerlink" title="Text Block"></a>Text Block</h2><p>即多行文本字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    SELECT `EMP_ID`, `LAST_NAME` FROM `EMPLOYEE_TB`</span><br><span class="hljs-string">    WHERE `CITY` = &#x27;INDIANAPOLIS&#x27;</span><br><span class="hljs-string">    ORDER BY `EMP_ID`, `LAST_NAME`;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="switch-表达式-1"><a href="#switch-表达式-1" class="headerlink" title="switch 表达式"></a>switch 表达式</h2><p>在 Java 13中可以使用<code>yield</code>来跳出 switch expression 并返回一个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (x) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span> -&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span> -&gt; <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">default</span> -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">1</span>].length();<br>        <span class="hljs-keyword">yield</span> len;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// or</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (x) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">default</span>: &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">1</span>].length();<br>        <span class="hljs-keyword">yield</span> len;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="Java-14"><a href="#Java-14" class="headerlink" title="Java 14"></a>Java 14</h1><h2 id="Records"><a href="#Records" class="headerlink" title="Records"></a>Records</h2><p>Records 是一种新的类型声明。和枚举类似，是一种类的受限形式。主要用于数据的载体，表明数据不可变且仅包含最基本的方法例如构造函数和访问器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> length;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> width;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span> &#123;<br>        <span class="hljs-built_in">this</span>.length = length;<br>        <span class="hljs-built_in">this</span>.width = width;<br>    &#125;<br>    <br>    <span class="hljs-type">double</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> length; &#125;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">width</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> width; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于该类：</p><ul><li>方法仅包含构造器和访问器</li><li>所有成员均为final<br>因此可以将其更改为 Record 类型。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">float</span> length, <span class="hljs-type">float</span> width)</span> &#123; &#125;<br></code></pre></td></tr></table></figure></li></ul><p>一个 record 将会自动添加如下成员:</p><ul><li>为所有成员添加 private final field</li><li>为所有成员添加与名称和类型相同的可读访问器。在上述例子中，即<code>Rectangle::length()</code>和<code>Rectangle::width</code></li><li>一个公开的构造函数</li><li>实现<code>equals()</code>和<code>hashCode()</code>方法。表明两个 record 相等仅在它们的类型相同且包含的成员相等时。</li><li>实现<code>toString()</code>方法</li></ul><h3 id="Compact-Constructors"><a href="#Compact-Constructors" class="headerlink" title="Compact Constructors"></a>Compact Constructors</h3><p>可以为 Record 自定义构造函数。但 Record 的构造函数不存在参数列表, 其被称为 Compact Constructors。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">HelloWorld</span><span class="hljs-params">(String message)</span> &#123;<br>    <span class="hljs-keyword">public</span> HelloWorld &#123;<br>        java.util.Objects.requireNonNull(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><ul><li>Record 不能继承其他任何类</li><li>Record 不能声明其他字段, 除非该字段为 static</li><li>Record 不能为抽象类，其被隐式声明为 final</li><li>Record 中的成员被隐式声明为 final<br>除此之外, 其与普通的类相似</li></ul><h2 id="instanceof-模式匹配"><a href="#instanceof-模式匹配" class="headerlink" title="instanceof 模式匹配"></a>instanceof 模式匹配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-keyword">if</span> (s <span class="hljs-keyword">instanceof</span> String str) &#123;<br>    System.out.println(str);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Java-15-x2F-16-x2F-17"><a href="#Java-15-x2F-16-x2F-17" class="headerlink" title="Java 15&#x2F;16&#x2F;17"></a>Java 15&#x2F;16&#x2F;17</h1><h2 id="Sealed-Classes"><a href="#Sealed-Classes" class="headerlink" title="Sealed Classes"></a>Sealed Classes</h2><p>密封类或接口限制了可以继承或实现它们的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span><br>    <span class="hljs-keyword">permits</span> Circle, Square, Rectangle &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> radius;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">non-sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> side;<br>&#125;   <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> <span class="hljs-keyword">permits</span> FilledRectangle &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> length, width;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilledRectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> red, green, blue;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Record-增强"><a href="#Record-增强" class="headerlink" title="Record 增强"></a>Record 增强</h2><h3 id="Local-Record-Classes"><a href="#Local-Record-Classes" class="headerlink" title="Local Record Classes"></a>Local Record Classes</h3><p>在方法体中定义 Record。<br>与 local class 不同，local record class 隐式为 static, 即它们的方法不能访问函数中的变量。</p><h3 id="显式声明-Record-Class-中的成员"><a href="#显式声明-Record-Class-中的成员" class="headerlink" title="显式声明 Record Class 中的成员"></a>显式声明 Record Class 中的成员</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span> &#123;<br> <br>    <span class="hljs-comment">// Public accessor method</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Length is &quot;</span> + length);<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时也可声明 static 字段、函数及初始化器, 实例方法以及嵌套类和接口。(若为嵌套的record, 则隐式声明为 static), </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span> &#123;<br>    <br>    <span class="hljs-comment">// Static field</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> goldenRatio;<br><br>    <span class="hljs-comment">// Static initializer</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        goldenRatio = (<span class="hljs-number">1</span> + Math.sqrt(<span class="hljs-number">5</span>)) / <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Static method</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Rectangle <span class="hljs-title function_">createGoldenRectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> width)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(width, width * goldenRatio);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">record</span> <span class="hljs-title class_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span> &#123;<br><br>    <span class="hljs-comment">// Nested record class</span><br>    <span class="hljs-keyword">record</span> <span class="hljs-title class_">RotationAngle</span><span class="hljs-params">(<span class="hljs-type">double</span> angle)</span> &#123;<br>        <span class="hljs-keyword">public</span> RotationAngle &#123;<br>            angle = Math.toRadians(angle);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// Public instance method</span><br>    <span class="hljs-keyword">public</span> Rectangle <span class="hljs-title function_">getRotatedRectangleBoundingBox</span><span class="hljs-params">(<span class="hljs-type">double</span> angle)</span> &#123;<br>        <span class="hljs-type">RotationAngle</span> <span class="hljs-variable">ra</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RotationAngle</span>(angle);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> Math.abs(length * Math.cos(ra.angle())) +<br>                   Math.abs(width * Math.sin(ra.angle()));<br>        <span class="hljs-type">double</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> Math.abs(length * Math.sin(ra.angle())) +<br>                   Math.abs(width * Math.cos(ra.angle()));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(x, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="The-Canonical-Constructor-of-a-Record-Class"><a href="#The-Canonical-Constructor-of-a-Record-Class" class="headerlink" title="The Canonical Constructor of a Record Class"></a>The Canonical Constructor of a Record Class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span> &#123;<br>        <span class="hljs-keyword">if</span> (length &lt;= <span class="hljs-number">0</span> || width &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.IllegalArgumentException(<br>                String.format(<span class="hljs-string">&quot;Invalid dimensions: %f, %f&quot;</span>, length, width));<br>        &#125;<br>        <span class="hljs-built_in">this</span>.length = length;<br>        <span class="hljs-built_in">this</span>.width = width;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><h4 id="泛型支持"><a href="#泛型支持" class="headerlink" title="泛型支持"></a>泛型支持</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Triangle</span>&lt;C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Coordinate</span>&gt; (C top, C left, C right) &#123; &#125;<br></code></pre></td></tr></table></figure><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Customer</span><span class="hljs-params">(...)</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Billable</span> &#123; &#125;<br></code></pre></td></tr></table></figure><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Rectangle</span><span class="hljs-params">(</span><br><span class="hljs-params">    @GreaterThanZero <span class="hljs-type">double</span> length,</span><br><span class="hljs-params">    @GreaterThanZero <span class="hljs-type">double</span> width)</span> &#123; &#125;<br></code></pre></td></tr></table></figure><p>如果注解被应用于 record 上的成员, 则其他相关成员也会自动应用。例如上例中 <code>@GreaterThanZero</code> 不仅应用在 length 和 width, 还包括:</p><ul><li>canonical constructor 上的参数</li><li>The record class’s components</li><li>私有字段 (例如 length 和 width)</li><li>访问方法(例如 length 和 width)</li></ul><p>可以在 <code>@Target</code> 中指定应用的类型。例如仅应用于字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> GreaterThanZero &#123; &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch Linux 在 Virtual Box 中的安装</title>
    <link href="/2022/02/13/arch-install/"/>
    <url>/2022/02/13/arch-install/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前一直用的是 Debian，稳确实是稳，但少了很多软件，并且有些软件相当古老了，如果要自己装桌面还要美化的话还是相当折腾人的（<br>如果只是个人用的话（甚至放在虚拟机里）感觉没必要这么稳，这次重装就直接上 Arch 啦！（真香<br>之前也用过 Manjaro，确实比较方便，但放在虚拟机里面还是经常掉到坑里去（比如 VirtualBox Guest Additions，玄学玩意（x</p><h1 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h1><ul><li><p>下载 Arch Linux 镜像<br><code>https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/</code></p></li><li><p>启用 EFI 支持<br>在 Virtual Box 中，在 <code>设置 &gt;&gt; 系统</code> 中选择 <code>启用 EFI</code></p></li></ul><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="检查启动模式"><a href="#检查启动模式" class="headerlink" title="检查启动模式"></a>检查启动模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /sys/firmware/efi/efivars<br></code></pre></td></tr></table></figure><p>如果上述命令有输出的话，则系统采用 UEFI 模式启动</p><h2 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h2><p>如果是在虚拟机中安装的话，应该已经自动联网了。使用 ping 命令来验证网络的连通性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping archlinux.org<br></code></pre></td></tr></table></figure><h2 id="校对系统时间"><a href="#校对系统时间" class="headerlink" title="校对系统时间"></a>校对系统时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl set-ntp <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>使用 fdisk 或 lsblk 来查看磁盘设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l <br>lsblk<br></code></pre></td></tr></table></figure><p>通常情况下，在 Virtual Box 中仅有一块磁盘，其命名为 &#x2F;dev&#x2F;sda</p><p>这里使用 cgdisk 来进行分区。</p><table><thead><tr><th>名称</th><th>大小</th><th>描述</th><th>Hex code</th></tr></thead><tbody><tr><td>&#x2F;dev&#x2F;sda1</td><td>300MiB</td><td>EFI 分区</td><td>ef00</td></tr><tr><td>&#x2F;dev&#x2F;sda2</td><td>2GiB</td><td>Swap 分区</td><td>8200</td></tr><tr><td>&#x2F;dev&#x2F;sda3</td><td>-</td><td>文件系统</td><td>8300</td></tr></tbody></table><ul><li>Hex code 可以在 cgdisk 中使用 L 进行搜索；</li><li>在分区时，cgdisk 会自动在磁盘中留下大约 1MiB 的空间，其原因为：<blockquote><p>It may be intentional. A gap at the end of the disk could be used for a BIOS Boot Partition (which users must sometimes add after partitioning because they didn’t realize they needed it) or to adjust the size of the partition table. Unfortunately for this hypothesis, libparted doesn’t enable use of this space in either of these ways, although gdisk does.</p></blockquote></li></ul><h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><ul><li><p>EFI 分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.fat -F 32 /dev/sda1<br></code></pre></td></tr></table></figure></li><li><p>Swap 分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkswap /dev/sda2<br></code></pre></td></tr></table></figure><p>启用 Swap：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swapon /dev/sda2<br></code></pre></td></tr></table></figure></li><li><p>文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/sda3<br></code></pre></td></tr></table></figure></li></ul><h2 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统"></a>挂载文件系统</h2><p>将根目录挂载到 <code>/mnt</code>，然后将 EFI 分区挂载到 <code>/mnt/boot</code>，启用 Swap 分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/sda3 /mnt<br>mount /dev/sda1 /mnt/boot<br>swapon /dev/sda2<br></code></pre></td></tr></table></figure><h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1><h2 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h2><p>修改 <code>/etc/pacman.d/mirrorlist</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span> <span class="hljs-comment"># 清华源</span><br>Server = http://mirrors.aliyun.com/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span> <span class="hljs-comment"># 阿里云</span><br></code></pre></td></tr></table></figure><p>或者获取镜像列表后使用 reflector 进行镜像排序</p><ol><li>获取镜像列表<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O /etc/pacman.d/mirrorlist https://www.archlinux.org/mirrorlist/all/<br><span class="hljs-comment">#或是</span><br>wget -O /etc/pacman.d/mirrorlist https://www.archlinux.org/mirrorlist/?country=CN<br></code></pre></td></tr></table></figure></li><li>使用 reflector 排序<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reflector --verbose --latest 15 --<span class="hljs-built_in">sort</span> rate --save /etc/pacman.d/mirrorlist<br></code></pre></td></tr></table></figure></li></ol><p>更新一下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Syy<br></code></pre></td></tr></table></figure><h2 id="安装必备的包"><a href="#安装必备的包" class="headerlink" title="安装必备的包"></a>安装必备的包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacstrap /mnt base linux linux-firmware vim<br></code></pre></td></tr></table></figure><h1 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h1><h2 id="Fstab"><a href="#Fstab" class="headerlink" title="Fstab"></a>Fstab</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure><h2 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h2><p>进入新系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">arch-chroot /mnt<br></code></pre></td></tr></table></figure><h2 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure><p>使用 hwclock 生成 <code>/etc/adjtime</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hwclock --systohc<br></code></pre></td></tr></table></figure><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>编辑 <code>/etc/locale.gen</code>，将 <code>en_US.UTF-8 UTF-8</code> 和其他需要的语言（例如 <code>zh_CN.UTF-8 UTF-8</code> ）取消注释。然后使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">locale-gen<br></code></pre></td></tr></table></figure><p>创建 <code>/etc/locale.conf</code>，设置变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># /etc/locale.conf</span><br>LANG=en_US.UTF-8<br></code></pre></td></tr></table></figure><h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-built_in">arch</span> &gt; /etc/hostname<br><span class="hljs-built_in">echo</span> 127.0.0.1 &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> ::1 &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><p>安装其他网络工具包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S dhcpcd<br></code></pre></td></tr></table></figure><h2 id="配置-bootloader"><a href="#配置-bootloader" class="headerlink" title="配置 bootloader"></a>配置 bootloader</h2><p>这里使用 systemd-boot 启动系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bootctl install<br>vim /boot/loader/entries/arch.conf<br></code></pre></td></tr></table></figure><p><code>/boot/loader/entries/arch.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">title Arch Linux<br>linux /vmlinuz-linux<br>initrd /intel-ucode.img<br>initrd /initramfs-linux.img<br></code></pre></td></tr></table></figure><p>注：</p><ul><li>如果启动失败，则需要注意路径是否在 EFI 分区中存在。例如，启动失败时，可检查 <code>/vmlinuz-linux</code> 是否在 <code>/dev/sda1</code>中存在</li><li><code>/intel-ucode.img</code> 需要安装 <code>intel-ucode</code>包（即 <code>pacman -S intel-ucode</code>），若未安装该包，则应删去该行。理论上虚拟机不需要该包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;options root=PARTUUID=<span class="hljs-subst">$(blkid -s PARTUUID -o value /dev/sda3)</span> rw&quot;</span> &gt;&gt; /boot/loader/entries/arch.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> fstrim.timer<br></code></pre></td></tr></table></figure><h1 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h1><h2 id="配置系统-1"><a href="#配置系统-1" class="headerlink" title="配置系统"></a>配置系统</h2><p>创建新用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd -m new_user<br></code></pre></td></tr></table></figure><p>安装中文字体、VirtualBox Guest Additions 和其他软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S noto-fonts-cjk virtualbox-guest-utils sudo git<br></code></pre></td></tr></table></figure><h2 id="安装桌面"><a href="#安装桌面" class="headerlink" title="安装桌面"></a>安装桌面</h2><p>桌面采用 awesome wm。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S xorg-server xorg-xinit sddm awesome feh picom alacritty zsh<br></code></pre></td></tr></table></figure><h3 id="awesome-主题配置"><a href="#awesome-主题配置" class="headerlink" title="awesome 主题配置"></a>awesome 主题配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/denstiny/awesome-config<br><span class="hljs-built_in">cd</span> ./awesome-config<br>./install.sh<br></code></pre></td></tr></table></figure><h3 id="配置终端"><a href="#配置终端" class="headerlink" title="配置终端"></a>配置终端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<br><span class="hljs-built_in">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<br><br>curl --socks5 proxy_server https://raw.githubusercontent.com/daltonmenezes/aura-theme/main/packages/alacritty/aura-theme.yml &gt; ~/.config/alacritty/alacritty.yml<br></code></pre></td></tr></table></figure><h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S fcitx5-im fcitx5-rime<br></code></pre></td></tr></table></figure><p>编辑 <code>~/.pam_environment</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GTK_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=fcitx<br>QT_IM_MODULE  <span class="hljs-attribute">DEFAULT</span>=fcitx<br>XMODIFIERS    <span class="hljs-attribute">DEFAULT</span>=\@im=fcitx<br>INPUT_METHOD  <span class="hljs-attribute">DEFAULT</span>=fcitx<br>SDL_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=fcitx<br>GLFW_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=ibus<br></code></pre></td></tr></table></figure><h2 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S alsa-utils pulseaudio<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://wiki.archlinux.org/title/Installation_guide">Installation guide</a><br><a href="https://wiki.archlinux.org/title/Systemd-boot">systemd-boot</a><br><a href="https://wiki.archlinux.org/title/VirtualBox/Install_Arch_Linux_as_a_guest#Install_the_Guest_Additions">VirtualBox&#x2F;Install Arch Linux as a guest</a><br><a href="https://www.cnblogs.com/lepeCoder/p/archlinux_mirrors.html">为archlinux选择国内镜像</a><br><a href="https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Fcitx5 (简体中文)</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arch Linux</tag>
      
      <tag>Virtual Box</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Github Action 自动部署 Hexo</title>
    <link href="/2022/01/11/hello-world/"/>
    <url>/2022/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天心血来潮用 Github Pages 整个博客<br>（主要是想找个地方备份下笔记</p><h1 id="Github-配置密钥"><a href="#Github-配置密钥" class="headerlink" title="Github 配置密钥"></a>Github 配置密钥</h1><p>首先生成密钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;wortoxs@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>这里我们得到了<code>deploy_key</code>以及<code>deploy_key.pub</code></p><h2 id="配置私钥"><a href="#配置私钥" class="headerlink" title="配置私钥"></a>配置私钥</h2><p>这里我们将私钥存放在博客代码的目录中, 这里就是 blog 仓库<br>将<code>depoly_key</code>放在 blog 仓库的 <code>Settings &gt; Secret</code>中, 命名为<code>HEXO_DEPLOY_KEY</code>, 用于之后 Github Action 推送至 Github Pages</p><h2 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h2><p>打开放置 Github Pages 文件的仓库, 在<code>Settings &gt; Deploy keys</code>中存放公钥, 及<code>Deply_key.pub</code></p><h1 id="配置-Github-Action"><a href="#配置-Github-Action" class="headerlink" title="配置 Github Action"></a>配置 Github Action</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-18.04</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.event.repository.owner.id</span> <span class="hljs-string">==</span> <span class="hljs-string">github.event.sender.id</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">source</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;12&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hexo</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">ACTION_DEPLOY_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 700 ~/.ssh</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          git config --global user.email &quot;john@doe.com&quot;</span><br><span class="hljs-string">          git config --global user.name &quot;John Doe&quot;</span><br><span class="hljs-string">          npm install hexo-cli -g</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo deploy</span><br></code></pre></td></tr></table></figure><p>这里最后也可以之间生成文件之间推送到仓库中:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span><br><br>    <span class="hljs-attr">env:</span> <br>    <span class="hljs-comment"># Github 仓库</span><br>    <span class="hljs-attr">GITHUB_REPO:</span> <span class="hljs-comment"># Github Repo</span><br><br>    <span class="hljs-comment"># 将编译后的博客文件推送到指定仓库</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><br>    <span class="hljs-string">cd</span> <span class="hljs-string">./public</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">git</span> <span class="hljs-string">init</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">.</span><br><br>    <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">.</span><br><br>    <span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-string">-m</span> <span class="hljs-string">&quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span><br><br>    <span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">--force</span> <span class="hljs-string">--quiet</span> <span class="hljs-string">&quot;$GITHUB_REPO&quot;</span> <span class="hljs-string">master:master</span><br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><p>其实也可以不分成两个仓库, 最后把生成的文件推送到 master 分支就好了</p></li><li><p>Depoly Key 上记得选上 Write Access, 否则会出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR: The key you are authenticating with has been marked as <span class="hljs-built_in">read</span> only.<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
